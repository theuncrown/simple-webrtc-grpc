// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: signalling.proto

package signalling

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoginClient is the client API for Login service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoginClient interface {
	TestLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	RecvMessage(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (Login_RecvMessageClient, error)
	SendMessage(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatReply, error)
	TestLogout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutReply, error)
	OnlineUserInfo(ctx context.Context, in *OnlineInfoRequest, opts ...grpc.CallOption) (*OnlineInfoReply, error)
	MessagingBidi(ctx context.Context, opts ...grpc.CallOption) (Login_MessagingBidiClient, error)
}

type loginClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginClient(cc grpc.ClientConnInterface) LoginClient {
	return &loginClient{cc}
}

func (c *loginClient) TestLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/signalling.login/TestLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginClient) RecvMessage(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (Login_RecvMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Login_ServiceDesc.Streams[0], "/signalling.login/RecvMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &loginRecvMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Login_RecvMessageClient interface {
	Recv() (*ChatReply, error)
	grpc.ClientStream
}

type loginRecvMessageClient struct {
	grpc.ClientStream
}

func (x *loginRecvMessageClient) Recv() (*ChatReply, error) {
	m := new(ChatReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *loginClient) SendMessage(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatReply, error) {
	out := new(ChatReply)
	err := c.cc.Invoke(ctx, "/signalling.login/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginClient) TestLogout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutReply, error) {
	out := new(LogoutReply)
	err := c.cc.Invoke(ctx, "/signalling.login/TestLogout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginClient) OnlineUserInfo(ctx context.Context, in *OnlineInfoRequest, opts ...grpc.CallOption) (*OnlineInfoReply, error) {
	out := new(OnlineInfoReply)
	err := c.cc.Invoke(ctx, "/signalling.login/OnlineUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginClient) MessagingBidi(ctx context.Context, opts ...grpc.CallOption) (Login_MessagingBidiClient, error) {
	stream, err := c.cc.NewStream(ctx, &Login_ServiceDesc.Streams[1], "/signalling.login/MessagingBidi", opts...)
	if err != nil {
		return nil, err
	}
	x := &loginMessagingBidiClient{stream}
	return x, nil
}

type Login_MessagingBidiClient interface {
	Send(*ChatRequest) error
	Recv() (*ChatRequest, error)
	grpc.ClientStream
}

type loginMessagingBidiClient struct {
	grpc.ClientStream
}

func (x *loginMessagingBidiClient) Send(m *ChatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *loginMessagingBidiClient) Recv() (*ChatRequest, error) {
	m := new(ChatRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LoginServer is the server API for Login service.
// All implementations must embed UnimplementedLoginServer
// for forward compatibility
type LoginServer interface {
	TestLogin(context.Context, *LoginRequest) (*LoginReply, error)
	RecvMessage(*ChatRequest, Login_RecvMessageServer) error
	SendMessage(context.Context, *ChatRequest) (*ChatReply, error)
	TestLogout(context.Context, *LogoutRequest) (*LogoutReply, error)
	OnlineUserInfo(context.Context, *OnlineInfoRequest) (*OnlineInfoReply, error)
	MessagingBidi(Login_MessagingBidiServer) error
	mustEmbedUnimplementedLoginServer()
}

// UnimplementedLoginServer must be embedded to have forward compatible implementations.
type UnimplementedLoginServer struct {
}

func (UnimplementedLoginServer) TestLogin(context.Context, *LoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestLogin not implemented")
}
func (UnimplementedLoginServer) RecvMessage(*ChatRequest, Login_RecvMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method RecvMessage not implemented")
}
func (UnimplementedLoginServer) SendMessage(context.Context, *ChatRequest) (*ChatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedLoginServer) TestLogout(context.Context, *LogoutRequest) (*LogoutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestLogout not implemented")
}
func (UnimplementedLoginServer) OnlineUserInfo(context.Context, *OnlineInfoRequest) (*OnlineInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnlineUserInfo not implemented")
}
func (UnimplementedLoginServer) MessagingBidi(Login_MessagingBidiServer) error {
	return status.Errorf(codes.Unimplemented, "method MessagingBidi not implemented")
}
func (UnimplementedLoginServer) mustEmbedUnimplementedLoginServer() {}

// UnsafeLoginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginServer will
// result in compilation errors.
type UnsafeLoginServer interface {
	mustEmbedUnimplementedLoginServer()
}

func RegisterLoginServer(s grpc.ServiceRegistrar, srv LoginServer) {
	s.RegisterService(&Login_ServiceDesc, srv)
}

func _Login_TestLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServer).TestLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signalling.login/TestLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServer).TestLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Login_RecvMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LoginServer).RecvMessage(m, &loginRecvMessageServer{stream})
}

type Login_RecvMessageServer interface {
	Send(*ChatReply) error
	grpc.ServerStream
}

type loginRecvMessageServer struct {
	grpc.ServerStream
}

func (x *loginRecvMessageServer) Send(m *ChatReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Login_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signalling.login/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServer).SendMessage(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Login_TestLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServer).TestLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signalling.login/TestLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServer).TestLogout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Login_OnlineUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServer).OnlineUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signalling.login/OnlineUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServer).OnlineUserInfo(ctx, req.(*OnlineInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Login_MessagingBidi_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LoginServer).MessagingBidi(&loginMessagingBidiServer{stream})
}

type Login_MessagingBidiServer interface {
	Send(*ChatRequest) error
	Recv() (*ChatRequest, error)
	grpc.ServerStream
}

type loginMessagingBidiServer struct {
	grpc.ServerStream
}

func (x *loginMessagingBidiServer) Send(m *ChatRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *loginMessagingBidiServer) Recv() (*ChatRequest, error) {
	m := new(ChatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Login_ServiceDesc is the grpc.ServiceDesc for Login service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Login_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "signalling.login",
	HandlerType: (*LoginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestLogin",
			Handler:    _Login_TestLogin_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Login_SendMessage_Handler,
		},
		{
			MethodName: "TestLogout",
			Handler:    _Login_TestLogout_Handler,
		},
		{
			MethodName: "OnlineUserInfo",
			Handler:    _Login_OnlineUserInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecvMessage",
			Handler:       _Login_RecvMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MessagingBidi",
			Handler:       _Login_MessagingBidi_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "signalling.proto",
}
